// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: card.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artist            string               `protobuf:"bytes,1,opt,name=artist,proto3" json:"artist,omitempty"`
	ArtistIds         []string             `protobuf:"bytes,2,rep,name=artistIds,proto3" json:"artistIds,omitempty"`
	Availability      []string             `protobuf:"bytes,3,rep,name=availability,proto3" json:"availability,omitempty"`
	BoosterTypes      []string             `protobuf:"bytes,4,rep,name=boosterTypes,proto3" json:"boosterTypes,omitempty"`
	BorderColor       string               `protobuf:"bytes,5,opt,name=borderColor,proto3" json:"borderColor,omitempty"`
	ColorIdentity     []string             `protobuf:"bytes,6,rep,name=colorIdentity,proto3" json:"colorIdentity,omitempty"`
	Colors            []string             `protobuf:"bytes,7,rep,name=colors,proto3" json:"colors,omitempty"`
	ConvertedManaCost uint32               `protobuf:"varint,8,opt,name=convertedManaCost,proto3" json:"convertedManaCost,omitempty"`
	EdhrecRank        uint32               `protobuf:"varint,9,opt,name=edhrecRank,proto3" json:"edhrecRank,omitempty"`
	EdhrecSaltiness   float64              `protobuf:"fixed64,10,opt,name=edhrecSaltiness,proto3" json:"edhrecSaltiness,omitempty"`
	Finishes          []string             `protobuf:"bytes,11,rep,name=finishes,proto3" json:"finishes,omitempty"`
	ForeignData       []*Card_Foreigndata  `protobuf:"bytes,12,rep,name=foreignData,proto3" json:"foreignData,omitempty"`
	FrameVersion      string               `protobuf:"bytes,13,opt,name=frameVersion,proto3" json:"frameVersion,omitempty"`
	HasFoil           bool                 `protobuf:"varint,14,opt,name=hasFoil,proto3" json:"hasFoil,omitempty"`
	HasNonFoil        bool                 `protobuf:"varint,15,opt,name=hasNonFoil,proto3" json:"hasNonFoil,omitempty"`
	Identifiers       *Card_Identifiers    `protobuf:"bytes,16,opt,name=identifiers,proto3" json:"identifiers,omitempty"`
	IsReprint         bool                 `protobuf:"varint,17,opt,name=isReprint,proto3" json:"isReprint,omitempty"`
	Keywords          []string             `protobuf:"bytes,18,rep,name=keywords,proto3" json:"keywords,omitempty"`
	Language          string               `protobuf:"bytes,19,opt,name=language,proto3" json:"language,omitempty"`
	Layout            string               `protobuf:"bytes,20,opt,name=layout,proto3" json:"layout,omitempty"`
	Legalities        *Card_Legalities     `protobuf:"bytes,21,opt,name=legalities,proto3" json:"legalities,omitempty"`
	ManaCost          string               `protobuf:"bytes,22,opt,name=manaCost,proto3" json:"manaCost,omitempty"`
	ManaValue         uint32               `protobuf:"varint,23,opt,name=manaValue,proto3" json:"manaValue,omitempty"`
	Name              string               `protobuf:"bytes,24,opt,name=name,proto3" json:"name,omitempty"`
	Number            string               `protobuf:"bytes,25,opt,name=number,proto3" json:"number,omitempty"`
	OriginalText      string               `protobuf:"bytes,26,opt,name=originalText,proto3" json:"originalText,omitempty"`
	OriginalType      string               `protobuf:"bytes,27,opt,name=originalType,proto3" json:"originalType,omitempty"`
	Power             string               `protobuf:"bytes,28,opt,name=power,proto3" json:"power,omitempty"`
	Printings         []string             `protobuf:"bytes,29,rep,name=printings,proto3" json:"printings,omitempty"`
	PurchaseUrls      *Card_Purchaseurls   `protobuf:"bytes,30,opt,name=purchaseUrls,proto3" json:"purchaseUrls,omitempty"`
	Rarity            string               `protobuf:"bytes,31,opt,name=rarity,proto3" json:"rarity,omitempty"`
	SetCode           string               `protobuf:"bytes,32,opt,name=setCode,proto3" json:"setCode,omitempty"`
	SourceProducts    *Card_Sourceproducts `protobuf:"bytes,33,opt,name=sourceProducts,proto3" json:"sourceProducts,omitempty"`
	Subtypes          []string             `protobuf:"bytes,34,rep,name=subtypes,proto3" json:"subtypes,omitempty"`
	Supertypes        []*anypb.Any         `protobuf:"bytes,35,rep,name=supertypes,proto3" json:"supertypes,omitempty"`
	Text              string               `protobuf:"bytes,36,opt,name=text,proto3" json:"text,omitempty"`
	Toughness         string               `protobuf:"bytes,37,opt,name=toughness,proto3" json:"toughness,omitempty"`
	Type              string               `protobuf:"bytes,38,opt,name=type,proto3" json:"type,omitempty"`
	Types             []string             `protobuf:"bytes,39,rep,name=types,proto3" json:"types,omitempty"`
	Uuid              string               `protobuf:"bytes,40,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Variations        []string             `protobuf:"bytes,41,rep,name=variations,proto3" json:"variations,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{0}
}

func (x *Card) GetArtist() string {
	if x != nil {
		return x.Artist
	}
	return ""
}

func (x *Card) GetArtistIds() []string {
	if x != nil {
		return x.ArtistIds
	}
	return nil
}

func (x *Card) GetAvailability() []string {
	if x != nil {
		return x.Availability
	}
	return nil
}

func (x *Card) GetBoosterTypes() []string {
	if x != nil {
		return x.BoosterTypes
	}
	return nil
}

func (x *Card) GetBorderColor() string {
	if x != nil {
		return x.BorderColor
	}
	return ""
}

func (x *Card) GetColorIdentity() []string {
	if x != nil {
		return x.ColorIdentity
	}
	return nil
}

func (x *Card) GetColors() []string {
	if x != nil {
		return x.Colors
	}
	return nil
}

func (x *Card) GetConvertedManaCost() uint32 {
	if x != nil {
		return x.ConvertedManaCost
	}
	return 0
}

func (x *Card) GetEdhrecRank() uint32 {
	if x != nil {
		return x.EdhrecRank
	}
	return 0
}

func (x *Card) GetEdhrecSaltiness() float64 {
	if x != nil {
		return x.EdhrecSaltiness
	}
	return 0
}

func (x *Card) GetFinishes() []string {
	if x != nil {
		return x.Finishes
	}
	return nil
}

func (x *Card) GetForeignData() []*Card_Foreigndata {
	if x != nil {
		return x.ForeignData
	}
	return nil
}

func (x *Card) GetFrameVersion() string {
	if x != nil {
		return x.FrameVersion
	}
	return ""
}

func (x *Card) GetHasFoil() bool {
	if x != nil {
		return x.HasFoil
	}
	return false
}

func (x *Card) GetHasNonFoil() bool {
	if x != nil {
		return x.HasNonFoil
	}
	return false
}

func (x *Card) GetIdentifiers() *Card_Identifiers {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *Card) GetIsReprint() bool {
	if x != nil {
		return x.IsReprint
	}
	return false
}

func (x *Card) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *Card) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Card) GetLayout() string {
	if x != nil {
		return x.Layout
	}
	return ""
}

func (x *Card) GetLegalities() *Card_Legalities {
	if x != nil {
		return x.Legalities
	}
	return nil
}

func (x *Card) GetManaCost() string {
	if x != nil {
		return x.ManaCost
	}
	return ""
}

func (x *Card) GetManaValue() uint32 {
	if x != nil {
		return x.ManaValue
	}
	return 0
}

func (x *Card) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Card) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Card) GetOriginalText() string {
	if x != nil {
		return x.OriginalText
	}
	return ""
}

func (x *Card) GetOriginalType() string {
	if x != nil {
		return x.OriginalType
	}
	return ""
}

func (x *Card) GetPower() string {
	if x != nil {
		return x.Power
	}
	return ""
}

func (x *Card) GetPrintings() []string {
	if x != nil {
		return x.Printings
	}
	return nil
}

func (x *Card) GetPurchaseUrls() *Card_Purchaseurls {
	if x != nil {
		return x.PurchaseUrls
	}
	return nil
}

func (x *Card) GetRarity() string {
	if x != nil {
		return x.Rarity
	}
	return ""
}

func (x *Card) GetSetCode() string {
	if x != nil {
		return x.SetCode
	}
	return ""
}

func (x *Card) GetSourceProducts() *Card_Sourceproducts {
	if x != nil {
		return x.SourceProducts
	}
	return nil
}

func (x *Card) GetSubtypes() []string {
	if x != nil {
		return x.Subtypes
	}
	return nil
}

func (x *Card) GetSupertypes() []*anypb.Any {
	if x != nil {
		return x.Supertypes
	}
	return nil
}

func (x *Card) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Card) GetToughness() string {
	if x != nil {
		return x.Toughness
	}
	return ""
}

func (x *Card) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Card) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *Card) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Card) GetVariations() []string {
	if x != nil {
		return x.Variations
	}
	return nil
}

type Card_Foreigndata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlavorText   string `protobuf:"bytes,1,opt,name=flavorText,proto3" json:"flavorText,omitempty"`
	Language     string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	MultiverseId uint32 `protobuf:"varint,3,opt,name=multiverseId,proto3" json:"multiverseId,omitempty"`
	Name         string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Text         string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	Type         string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Card_Foreigndata) Reset() {
	*x = Card_Foreigndata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card_Foreigndata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card_Foreigndata) ProtoMessage() {}

func (x *Card_Foreigndata) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card_Foreigndata.ProtoReflect.Descriptor instead.
func (*Card_Foreigndata) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Card_Foreigndata) GetFlavorText() string {
	if x != nil {
		return x.FlavorText
	}
	return ""
}

func (x *Card_Foreigndata) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Card_Foreigndata) GetMultiverseId() uint32 {
	if x != nil {
		return x.MultiverseId
	}
	return 0
}

func (x *Card_Foreigndata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Card_Foreigndata) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Card_Foreigndata) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Card_Identifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardKingdomId          string `protobuf:"bytes,1,opt,name=cardKingdomId,proto3" json:"cardKingdomId,omitempty"`
	McmId                  string `protobuf:"bytes,2,opt,name=mcmId,proto3" json:"mcmId,omitempty"`
	McmMetaId              string `protobuf:"bytes,3,opt,name=mcmMetaId,proto3" json:"mcmMetaId,omitempty"`
	MtgjsonFoilVersionId   string `protobuf:"bytes,4,opt,name=mtgjsonFoilVersionId,proto3" json:"mtgjsonFoilVersionId,omitempty"`
	MtgjsonV4Id            string `protobuf:"bytes,5,opt,name=mtgjsonV4Id,proto3" json:"mtgjsonV4Id,omitempty"`
	MtgoFoilId             string `protobuf:"bytes,6,opt,name=mtgoFoilId,proto3" json:"mtgoFoilId,omitempty"`
	MtgoId                 string `protobuf:"bytes,7,opt,name=mtgoId,proto3" json:"mtgoId,omitempty"`
	MultiverseId           string `protobuf:"bytes,8,opt,name=multiverseId,proto3" json:"multiverseId,omitempty"`
	ScryfallId             string `protobuf:"bytes,9,opt,name=scryfallId,proto3" json:"scryfallId,omitempty"`
	ScryfallIllustrationId string `protobuf:"bytes,10,opt,name=scryfallIllustrationId,proto3" json:"scryfallIllustrationId,omitempty"`
	ScryfallOracleId       string `protobuf:"bytes,11,opt,name=scryfallOracleId,proto3" json:"scryfallOracleId,omitempty"`
	TcgplayerProductId     string `protobuf:"bytes,12,opt,name=tcgplayerProductId,proto3" json:"tcgplayerProductId,omitempty"`
}

func (x *Card_Identifiers) Reset() {
	*x = Card_Identifiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card_Identifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card_Identifiers) ProtoMessage() {}

func (x *Card_Identifiers) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card_Identifiers.ProtoReflect.Descriptor instead.
func (*Card_Identifiers) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Card_Identifiers) GetCardKingdomId() string {
	if x != nil {
		return x.CardKingdomId
	}
	return ""
}

func (x *Card_Identifiers) GetMcmId() string {
	if x != nil {
		return x.McmId
	}
	return ""
}

func (x *Card_Identifiers) GetMcmMetaId() string {
	if x != nil {
		return x.McmMetaId
	}
	return ""
}

func (x *Card_Identifiers) GetMtgjsonFoilVersionId() string {
	if x != nil {
		return x.MtgjsonFoilVersionId
	}
	return ""
}

func (x *Card_Identifiers) GetMtgjsonV4Id() string {
	if x != nil {
		return x.MtgjsonV4Id
	}
	return ""
}

func (x *Card_Identifiers) GetMtgoFoilId() string {
	if x != nil {
		return x.MtgoFoilId
	}
	return ""
}

func (x *Card_Identifiers) GetMtgoId() string {
	if x != nil {
		return x.MtgoId
	}
	return ""
}

func (x *Card_Identifiers) GetMultiverseId() string {
	if x != nil {
		return x.MultiverseId
	}
	return ""
}

func (x *Card_Identifiers) GetScryfallId() string {
	if x != nil {
		return x.ScryfallId
	}
	return ""
}

func (x *Card_Identifiers) GetScryfallIllustrationId() string {
	if x != nil {
		return x.ScryfallIllustrationId
	}
	return ""
}

func (x *Card_Identifiers) GetScryfallOracleId() string {
	if x != nil {
		return x.ScryfallOracleId
	}
	return ""
}

func (x *Card_Identifiers) GetTcgplayerProductId() string {
	if x != nil {
		return x.TcgplayerProductId
	}
	return ""
}

type Card_Legalities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commander       string `protobuf:"bytes,1,opt,name=commander,proto3" json:"commander,omitempty"`
	Duel            string `protobuf:"bytes,2,opt,name=duel,proto3" json:"duel,omitempty"`
	Legacy          string `protobuf:"bytes,3,opt,name=legacy,proto3" json:"legacy,omitempty"`
	Modern          string `protobuf:"bytes,4,opt,name=modern,proto3" json:"modern,omitempty"`
	Oathbreaker     string `protobuf:"bytes,5,opt,name=oathbreaker,proto3" json:"oathbreaker,omitempty"`
	Paupercommander string `protobuf:"bytes,6,opt,name=paupercommander,proto3" json:"paupercommander,omitempty"`
	Penny           string `protobuf:"bytes,7,opt,name=penny,proto3" json:"penny,omitempty"`
	Predh           string `protobuf:"bytes,8,opt,name=predh,proto3" json:"predh,omitempty"`
	Premodern       string `protobuf:"bytes,9,opt,name=premodern,proto3" json:"premodern,omitempty"`
	Vintage         string `protobuf:"bytes,10,opt,name=vintage,proto3" json:"vintage,omitempty"`
}

func (x *Card_Legalities) Reset() {
	*x = Card_Legalities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card_Legalities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card_Legalities) ProtoMessage() {}

func (x *Card_Legalities) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card_Legalities.ProtoReflect.Descriptor instead.
func (*Card_Legalities) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Card_Legalities) GetCommander() string {
	if x != nil {
		return x.Commander
	}
	return ""
}

func (x *Card_Legalities) GetDuel() string {
	if x != nil {
		return x.Duel
	}
	return ""
}

func (x *Card_Legalities) GetLegacy() string {
	if x != nil {
		return x.Legacy
	}
	return ""
}

func (x *Card_Legalities) GetModern() string {
	if x != nil {
		return x.Modern
	}
	return ""
}

func (x *Card_Legalities) GetOathbreaker() string {
	if x != nil {
		return x.Oathbreaker
	}
	return ""
}

func (x *Card_Legalities) GetPaupercommander() string {
	if x != nil {
		return x.Paupercommander
	}
	return ""
}

func (x *Card_Legalities) GetPenny() string {
	if x != nil {
		return x.Penny
	}
	return ""
}

func (x *Card_Legalities) GetPredh() string {
	if x != nil {
		return x.Predh
	}
	return ""
}

func (x *Card_Legalities) GetPremodern() string {
	if x != nil {
		return x.Premodern
	}
	return ""
}

func (x *Card_Legalities) GetVintage() string {
	if x != nil {
		return x.Vintage
	}
	return ""
}

type Card_Purchaseurls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardKingdom string `protobuf:"bytes,1,opt,name=cardKingdom,proto3" json:"cardKingdom,omitempty"`
	Cardmarket  string `protobuf:"bytes,2,opt,name=cardmarket,proto3" json:"cardmarket,omitempty"`
	Tcgplayer   string `protobuf:"bytes,3,opt,name=tcgplayer,proto3" json:"tcgplayer,omitempty"`
}

func (x *Card_Purchaseurls) Reset() {
	*x = Card_Purchaseurls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card_Purchaseurls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card_Purchaseurls) ProtoMessage() {}

func (x *Card_Purchaseurls) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card_Purchaseurls.ProtoReflect.Descriptor instead.
func (*Card_Purchaseurls) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Card_Purchaseurls) GetCardKingdom() string {
	if x != nil {
		return x.CardKingdom
	}
	return ""
}

func (x *Card_Purchaseurls) GetCardmarket() string {
	if x != nil {
		return x.Cardmarket
	}
	return ""
}

func (x *Card_Purchaseurls) GetTcgplayer() string {
	if x != nil {
		return x.Tcgplayer
	}
	return ""
}

type Card_Sourceproducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonfoil []string `protobuf:"bytes,1,rep,name=nonfoil,proto3" json:"nonfoil,omitempty"`
}

func (x *Card_Sourceproducts) Reset() {
	*x = Card_Sourceproducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card_Sourceproducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card_Sourceproducts) ProtoMessage() {}

func (x *Card_Sourceproducts) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card_Sourceproducts.ProtoReflect.Descriptor instead.
func (*Card_Sourceproducts) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Card_Sourceproducts) GetNonfoil() []string {
	if x != nil {
		return x.Nonfoil
	}
	return nil
}

var File_card_proto protoreflect.FileDescriptor

var file_card_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb2, 0x13, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x61,
	0x6e, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x64, 0x68, 0x72, 0x65, 0x63,
	0x52, 0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x64, 0x68, 0x72,
	0x65, 0x63, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x64, 0x68, 0x72, 0x65, 0x63,
	0x53, 0x61, 0x6c, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x65, 0x64, 0x68, 0x72, 0x65, 0x63, 0x53, 0x61, 0x6c, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0b,
	0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x66,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x68, 0x61, 0x73, 0x46, 0x6f, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x68, 0x61, 0x73, 0x46, 0x6f, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x4e,
	0x6f, 0x6e, 0x46, 0x6f, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61,
	0x73, 0x4e, 0x6f, 0x6e, 0x46, 0x6f, 0x69, 0x6c, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x52, 0x65, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x54, 0x65, 0x78, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c,
	0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x75, 0x72, 0x6c, 0x73, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x55, 0x72,
	0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x75, 0x67, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x67, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x27, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xa9, 0x01,
	0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xcd, 0x03, 0x0a, 0x0b, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x72,
	0x64, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x63, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x63, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x63, 0x6d, 0x4d, 0x65, 0x74, 0x61,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x63, 0x6d, 0x4d, 0x65, 0x74,
	0x61, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x74, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x46, 0x6f,
	0x69, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x6d, 0x74, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x46, 0x6f, 0x69, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x74, 0x67, 0x6a, 0x73,
	0x6f, 0x6e, 0x56, 0x34, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x74,
	0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x56, 0x34, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x74, 0x67,
	0x6f, 0x46, 0x6f, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x74, 0x67, 0x6f, 0x46, 0x6f, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x74, 0x67,
	0x6f, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x74, 0x67, 0x6f, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x79, 0x66, 0x61, 0x6c,
	0x6c, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x79, 0x66,
	0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x63, 0x72, 0x79, 0x66, 0x61, 0x6c,
	0x6c, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x63, 0x72, 0x79, 0x66, 0x61, 0x6c, 0x6c, 0x49,
	0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x73, 0x63, 0x72, 0x79, 0x66, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x63, 0x72, 0x79, 0x66, 0x61, 0x6c,
	0x6c, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x63, 0x67,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x63, 0x67, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x1a, 0x9e, 0x02, 0x0a, 0x0a, 0x4c, 0x65,
	0x67, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x75, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x75, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x61,
	0x74, 0x68, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x61, 0x74, 0x68, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x61, 0x75, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x75, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x65, 0x6e, 0x6e, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x65, 0x6e, 0x6e, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x65, 0x64, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x65,
	0x64, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x6e, 0x0a, 0x0c, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61,
	0x72, 0x64, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x61, 0x72, 0x64, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x72, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x63, 0x67, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x63, 0x67, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x1a, 0x2a, 0x0a, 0x0e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x6f, 0x6e, 0x66, 0x6f, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x6f, 0x6e, 0x66, 0x6f, 0x69, 0x6c, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_card_proto_rawDescOnce sync.Once
	file_card_proto_rawDescData = file_card_proto_rawDesc
)

func file_card_proto_rawDescGZIP() []byte {
	file_card_proto_rawDescOnce.Do(func() {
		file_card_proto_rawDescData = protoimpl.X.CompressGZIP(file_card_proto_rawDescData)
	})
	return file_card_proto_rawDescData
}

var file_card_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_card_proto_goTypes = []interface{}{
	(*Card)(nil),                // 0: protobuf.Card
	(*Card_Foreigndata)(nil),    // 1: protobuf.Card.Foreigndata
	(*Card_Identifiers)(nil),    // 2: protobuf.Card.Identifiers
	(*Card_Legalities)(nil),     // 3: protobuf.Card.Legalities
	(*Card_Purchaseurls)(nil),   // 4: protobuf.Card.Purchaseurls
	(*Card_Sourceproducts)(nil), // 5: protobuf.Card.Sourceproducts
	(*anypb.Any)(nil),           // 6: google.protobuf.Any
}
var file_card_proto_depIdxs = []int32{
	1, // 0: protobuf.Card.foreignData:type_name -> protobuf.Card.Foreigndata
	2, // 1: protobuf.Card.identifiers:type_name -> protobuf.Card.Identifiers
	3, // 2: protobuf.Card.legalities:type_name -> protobuf.Card.Legalities
	4, // 3: protobuf.Card.purchaseUrls:type_name -> protobuf.Card.Purchaseurls
	5, // 4: protobuf.Card.sourceProducts:type_name -> protobuf.Card.Sourceproducts
	6, // 5: protobuf.Card.supertypes:type_name -> google.protobuf.Any
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_card_proto_init() }
func file_card_proto_init() {
	if File_card_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_card_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card_Foreigndata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card_Identifiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card_Legalities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card_Purchaseurls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card_Sourceproducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_card_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_card_proto_goTypes,
		DependencyIndexes: file_card_proto_depIdxs,
		MessageInfos:      file_card_proto_msgTypes,
	}.Build()
	File_card_proto = out.File
	file_card_proto_rawDesc = nil
	file_card_proto_goTypes = nil
	file_card_proto_depIdxs = nil
}
