// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: card_with_enum.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CardWithEnum_Availability int32

const (
	CardWithEnum_Availability_Unknown CardWithEnum_Availability = 0
	CardWithEnum_Availability_MTGO    CardWithEnum_Availability = 1
	CardWithEnum_Availability_Paper   CardWithEnum_Availability = 2
)

// Enum value maps for CardWithEnum_Availability.
var (
	CardWithEnum_Availability_name = map[int32]string{
		0: "Availability_Unknown",
		1: "Availability_MTGO",
		2: "Availability_Paper",
	}
	CardWithEnum_Availability_value = map[string]int32{
		"Availability_Unknown": 0,
		"Availability_MTGO":    1,
		"Availability_Paper":   2,
	}
)

func (x CardWithEnum_Availability) Enum() *CardWithEnum_Availability {
	p := new(CardWithEnum_Availability)
	*p = x
	return p
}

func (x CardWithEnum_Availability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardWithEnum_Availability) Descriptor() protoreflect.EnumDescriptor {
	return file_card_with_enum_proto_enumTypes[0].Descriptor()
}

func (CardWithEnum_Availability) Type() protoreflect.EnumType {
	return &file_card_with_enum_proto_enumTypes[0]
}

func (x CardWithEnum_Availability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardWithEnum_Availability.Descriptor instead.
func (CardWithEnum_Availability) EnumDescriptor() ([]byte, []int) {
	return file_card_with_enum_proto_rawDescGZIP(), []int{0, 0}
}

type CardWithEnum_BoosterType int32

const (
	CardWithEnum_BoosterType_Unknown CardWithEnum_BoosterType = 0
	CardWithEnum_BoosterType_Default CardWithEnum_BoosterType = 1
)

// Enum value maps for CardWithEnum_BoosterType.
var (
	CardWithEnum_BoosterType_name = map[int32]string{
		0: "BoosterType_Unknown",
		1: "BoosterType_Default",
	}
	CardWithEnum_BoosterType_value = map[string]int32{
		"BoosterType_Unknown": 0,
		"BoosterType_Default": 1,
	}
)

func (x CardWithEnum_BoosterType) Enum() *CardWithEnum_BoosterType {
	p := new(CardWithEnum_BoosterType)
	*p = x
	return p
}

func (x CardWithEnum_BoosterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardWithEnum_BoosterType) Descriptor() protoreflect.EnumDescriptor {
	return file_card_with_enum_proto_enumTypes[1].Descriptor()
}

func (CardWithEnum_BoosterType) Type() protoreflect.EnumType {
	return &file_card_with_enum_proto_enumTypes[1]
}

func (x CardWithEnum_BoosterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardWithEnum_BoosterType.Descriptor instead.
func (CardWithEnum_BoosterType) EnumDescriptor() ([]byte, []int) {
	return file_card_with_enum_proto_rawDescGZIP(), []int{0, 1}
}

type CardWithEnum_BorderColor int32

const (
	CardWithEnum_BorderColor_Unknown CardWithEnum_BorderColor = 0
	CardWithEnum_BorderColor_Black   CardWithEnum_BorderColor = 1
)

// Enum value maps for CardWithEnum_BorderColor.
var (
	CardWithEnum_BorderColor_name = map[int32]string{
		0: "BorderColor_Unknown",
		1: "BorderColor_Black",
	}
	CardWithEnum_BorderColor_value = map[string]int32{
		"BorderColor_Unknown": 0,
		"BorderColor_Black":   1,
	}
)

func (x CardWithEnum_BorderColor) Enum() *CardWithEnum_BorderColor {
	p := new(CardWithEnum_BorderColor)
	*p = x
	return p
}

func (x CardWithEnum_BorderColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardWithEnum_BorderColor) Descriptor() protoreflect.EnumDescriptor {
	return file_card_with_enum_proto_enumTypes[2].Descriptor()
}

func (CardWithEnum_BorderColor) Type() protoreflect.EnumType {
	return &file_card_with_enum_proto_enumTypes[2]
}

func (x CardWithEnum_BorderColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardWithEnum_BorderColor.Descriptor instead.
func (CardWithEnum_BorderColor) EnumDescriptor() ([]byte, []int) {
	return file_card_with_enum_proto_rawDescGZIP(), []int{0, 2}
}

type CardWithEnum_ColorIdentity int32

const (
	CardWithEnum_ColorIdentity_Unknown CardWithEnum_ColorIdentity = 0
	CardWithEnum_ColorIdentify_White   CardWithEnum_ColorIdentity = 1
)

// Enum value maps for CardWithEnum_ColorIdentity.
var (
	CardWithEnum_ColorIdentity_name = map[int32]string{
		0: "ColorIdentity_Unknown",
		1: "ColorIdentify_White",
	}
	CardWithEnum_ColorIdentity_value = map[string]int32{
		"ColorIdentity_Unknown": 0,
		"ColorIdentify_White":   1,
	}
)

func (x CardWithEnum_ColorIdentity) Enum() *CardWithEnum_ColorIdentity {
	p := new(CardWithEnum_ColorIdentity)
	*p = x
	return p
}

func (x CardWithEnum_ColorIdentity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardWithEnum_ColorIdentity) Descriptor() protoreflect.EnumDescriptor {
	return file_card_with_enum_proto_enumTypes[3].Descriptor()
}

func (CardWithEnum_ColorIdentity) Type() protoreflect.EnumType {
	return &file_card_with_enum_proto_enumTypes[3]
}

func (x CardWithEnum_ColorIdentity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardWithEnum_ColorIdentity.Descriptor instead.
func (CardWithEnum_ColorIdentity) EnumDescriptor() ([]byte, []int) {
	return file_card_with_enum_proto_rawDescGZIP(), []int{0, 3}
}

type CardWithEnum_Colors int32

const (
	CardWithEnum_Colors_Unknown CardWithEnum_Colors = 0
	CardWithEnum_Colors_White   CardWithEnum_Colors = 1
)

// Enum value maps for CardWithEnum_Colors.
var (
	CardWithEnum_Colors_name = map[int32]string{
		0: "Colors_Unknown",
		1: "Colors_White",
	}
	CardWithEnum_Colors_value = map[string]int32{
		"Colors_Unknown": 0,
		"Colors_White":   1,
	}
)

func (x CardWithEnum_Colors) Enum() *CardWithEnum_Colors {
	p := new(CardWithEnum_Colors)
	*p = x
	return p
}

func (x CardWithEnum_Colors) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardWithEnum_Colors) Descriptor() protoreflect.EnumDescriptor {
	return file_card_with_enum_proto_enumTypes[4].Descriptor()
}

func (CardWithEnum_Colors) Type() protoreflect.EnumType {
	return &file_card_with_enum_proto_enumTypes[4]
}

func (x CardWithEnum_Colors) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardWithEnum_Colors.Descriptor instead.
func (CardWithEnum_Colors) EnumDescriptor() ([]byte, []int) {
	return file_card_with_enum_proto_rawDescGZIP(), []int{0, 4}
}

type CardWithEnum_Finishes int32

const (
	CardWithEnum_Finishes_Unknown CardWithEnum_Finishes = 0
	CardWithEnum_Finishes_NonFoil CardWithEnum_Finishes = 1
)

// Enum value maps for CardWithEnum_Finishes.
var (
	CardWithEnum_Finishes_name = map[int32]string{
		0: "Finishes_Unknown",
		1: "Finishes_NonFoil",
	}
	CardWithEnum_Finishes_value = map[string]int32{
		"Finishes_Unknown": 0,
		"Finishes_NonFoil": 1,
	}
)

func (x CardWithEnum_Finishes) Enum() *CardWithEnum_Finishes {
	p := new(CardWithEnum_Finishes)
	*p = x
	return p
}

func (x CardWithEnum_Finishes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardWithEnum_Finishes) Descriptor() protoreflect.EnumDescriptor {
	return file_card_with_enum_proto_enumTypes[5].Descriptor()
}

func (CardWithEnum_Finishes) Type() protoreflect.EnumType {
	return &file_card_with_enum_proto_enumTypes[5]
}

func (x CardWithEnum_Finishes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardWithEnum_Finishes.Descriptor instead.
func (CardWithEnum_Finishes) EnumDescriptor() ([]byte, []int) {
	return file_card_with_enum_proto_rawDescGZIP(), []int{0, 5}
}

type CardWithEnum_Keyword int32

const (
	CardWithEnum_Keyword_Unknown     CardWithEnum_Keyword = 0
	CardWithEnum_Keyword_FirstStrike CardWithEnum_Keyword = 1
)

// Enum value maps for CardWithEnum_Keyword.
var (
	CardWithEnum_Keyword_name = map[int32]string{
		0: "Keyword_Unknown",
		1: "Keyword_FirstStrike",
	}
	CardWithEnum_Keyword_value = map[string]int32{
		"Keyword_Unknown":     0,
		"Keyword_FirstStrike": 1,
	}
)

func (x CardWithEnum_Keyword) Enum() *CardWithEnum_Keyword {
	p := new(CardWithEnum_Keyword)
	*p = x
	return p
}

func (x CardWithEnum_Keyword) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardWithEnum_Keyword) Descriptor() protoreflect.EnumDescriptor {
	return file_card_with_enum_proto_enumTypes[6].Descriptor()
}

func (CardWithEnum_Keyword) Type() protoreflect.EnumType {
	return &file_card_with_enum_proto_enumTypes[6]
}

func (x CardWithEnum_Keyword) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardWithEnum_Keyword.Descriptor instead.
func (CardWithEnum_Keyword) EnumDescriptor() ([]byte, []int) {
	return file_card_with_enum_proto_rawDescGZIP(), []int{0, 6}
}

type CardWithEnum_Layout int32

const (
	CardWithEnum_Layout_Unknown CardWithEnum_Layout = 0
	CardWithEnum_Layout_Normal  CardWithEnum_Layout = 1
)

// Enum value maps for CardWithEnum_Layout.
var (
	CardWithEnum_Layout_name = map[int32]string{
		0: "Layout_Unknown",
		1: "Layout_Normal",
	}
	CardWithEnum_Layout_value = map[string]int32{
		"Layout_Unknown": 0,
		"Layout_Normal":  1,
	}
)

func (x CardWithEnum_Layout) Enum() *CardWithEnum_Layout {
	p := new(CardWithEnum_Layout)
	*p = x
	return p
}

func (x CardWithEnum_Layout) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardWithEnum_Layout) Descriptor() protoreflect.EnumDescriptor {
	return file_card_with_enum_proto_enumTypes[7].Descriptor()
}

func (CardWithEnum_Layout) Type() protoreflect.EnumType {
	return &file_card_with_enum_proto_enumTypes[7]
}

func (x CardWithEnum_Layout) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardWithEnum_Layout.Descriptor instead.
func (CardWithEnum_Layout) EnumDescriptor() ([]byte, []int) {
	return file_card_with_enum_proto_rawDescGZIP(), []int{0, 7}
}

type CardWithEnum_Rarity int32

const (
	CardWithEnum_Rarity_Unknown  CardWithEnum_Rarity = 0
	CardWithEnum_Rarity_Uncommon CardWithEnum_Rarity = 1
)

// Enum value maps for CardWithEnum_Rarity.
var (
	CardWithEnum_Rarity_name = map[int32]string{
		0: "Rarity_Unknown",
		1: "Rarity_Uncommon",
	}
	CardWithEnum_Rarity_value = map[string]int32{
		"Rarity_Unknown":  0,
		"Rarity_Uncommon": 1,
	}
)

func (x CardWithEnum_Rarity) Enum() *CardWithEnum_Rarity {
	p := new(CardWithEnum_Rarity)
	*p = x
	return p
}

func (x CardWithEnum_Rarity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardWithEnum_Rarity) Descriptor() protoreflect.EnumDescriptor {
	return file_card_with_enum_proto_enumTypes[8].Descriptor()
}

func (CardWithEnum_Rarity) Type() protoreflect.EnumType {
	return &file_card_with_enum_proto_enumTypes[8]
}

func (x CardWithEnum_Rarity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardWithEnum_Rarity.Descriptor instead.
func (CardWithEnum_Rarity) EnumDescriptor() ([]byte, []int) {
	return file_card_with_enum_proto_rawDescGZIP(), []int{0, 8}
}

type CardWithEnum_SubType int32

const (
	CardWithEnum_SubType_Unknown CardWithEnum_SubType = 0
	CardWithEnum_SubType_Human   CardWithEnum_SubType = 1
	CardWithEnum_SubType_Cleric  CardWithEnum_SubType = 2
)

// Enum value maps for CardWithEnum_SubType.
var (
	CardWithEnum_SubType_name = map[int32]string{
		0: "SubType_Unknown",
		1: "SubType_Human",
		2: "SubType_Cleric",
	}
	CardWithEnum_SubType_value = map[string]int32{
		"SubType_Unknown": 0,
		"SubType_Human":   1,
		"SubType_Cleric":  2,
	}
)

func (x CardWithEnum_SubType) Enum() *CardWithEnum_SubType {
	p := new(CardWithEnum_SubType)
	*p = x
	return p
}

func (x CardWithEnum_SubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardWithEnum_SubType) Descriptor() protoreflect.EnumDescriptor {
	return file_card_with_enum_proto_enumTypes[9].Descriptor()
}

func (CardWithEnum_SubType) Type() protoreflect.EnumType {
	return &file_card_with_enum_proto_enumTypes[9]
}

func (x CardWithEnum_SubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardWithEnum_SubType.Descriptor instead.
func (CardWithEnum_SubType) EnumDescriptor() ([]byte, []int) {
	return file_card_with_enum_proto_rawDescGZIP(), []int{0, 9}
}

type CardWithEnum_Type int32

const (
	CardWithEnum_Type_Unknown  CardWithEnum_Type = 0
	CardWithEnum_Type_Creature CardWithEnum_Type = 1
)

// Enum value maps for CardWithEnum_Type.
var (
	CardWithEnum_Type_name = map[int32]string{
		0: "Type_Unknown",
		1: "Type_Creature",
	}
	CardWithEnum_Type_value = map[string]int32{
		"Type_Unknown":  0,
		"Type_Creature": 1,
	}
)

func (x CardWithEnum_Type) Enum() *CardWithEnum_Type {
	p := new(CardWithEnum_Type)
	*p = x
	return p
}

func (x CardWithEnum_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardWithEnum_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_card_with_enum_proto_enumTypes[10].Descriptor()
}

func (CardWithEnum_Type) Type() protoreflect.EnumType {
	return &file_card_with_enum_proto_enumTypes[10]
}

func (x CardWithEnum_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardWithEnum_Type.Descriptor instead.
func (CardWithEnum_Type) EnumDescriptor() ([]byte, []int) {
	return file_card_with_enum_proto_rawDescGZIP(), []int{0, 10}
}

type CardWithEnum_Legalities_Legality int32

const (
	CardWithEnum_Legalities_Legality_Unknown    CardWithEnum_Legalities_Legality = 0
	CardWithEnum_Legalities_Legality_Legal      CardWithEnum_Legalities_Legality = 1
	CardWithEnum_Legalities_Legality_Restricted CardWithEnum_Legalities_Legality = 2
)

// Enum value maps for CardWithEnum_Legalities_Legality.
var (
	CardWithEnum_Legalities_Legality_name = map[int32]string{
		0: "Legality_Unknown",
		1: "Legality_Legal",
		2: "Legality_Restricted",
	}
	CardWithEnum_Legalities_Legality_value = map[string]int32{
		"Legality_Unknown":    0,
		"Legality_Legal":      1,
		"Legality_Restricted": 2,
	}
)

func (x CardWithEnum_Legalities_Legality) Enum() *CardWithEnum_Legalities_Legality {
	p := new(CardWithEnum_Legalities_Legality)
	*p = x
	return p
}

func (x CardWithEnum_Legalities_Legality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardWithEnum_Legalities_Legality) Descriptor() protoreflect.EnumDescriptor {
	return file_card_with_enum_proto_enumTypes[11].Descriptor()
}

func (CardWithEnum_Legalities_Legality) Type() protoreflect.EnumType {
	return &file_card_with_enum_proto_enumTypes[11]
}

func (x CardWithEnum_Legalities_Legality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardWithEnum_Legalities_Legality.Descriptor instead.
func (CardWithEnum_Legalities_Legality) EnumDescriptor() ([]byte, []int) {
	return file_card_with_enum_proto_rawDescGZIP(), []int{0, 0, 0}
}

type CardWithEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artist            string                       `protobuf:"bytes,1,opt,name=artist,proto3" json:"artist,omitempty"`
	ArtistIds         []string                     `protobuf:"bytes,2,rep,name=artistIds,proto3" json:"artistIds,omitempty"`
	Availability      []CardWithEnum_Availability  `protobuf:"varint,3,rep,packed,name=availability,proto3,enum=protobuf.CardWithEnum_Availability" json:"availability,omitempty"`
	BoosterTypes      []CardWithEnum_BoosterType   `protobuf:"varint,4,rep,packed,name=boosterTypes,proto3,enum=protobuf.CardWithEnum_BoosterType" json:"boosterTypes,omitempty"`
	BorderColor       CardWithEnum_BorderColor     `protobuf:"varint,5,opt,name=borderColor,proto3,enum=protobuf.CardWithEnum_BorderColor" json:"borderColor,omitempty"`
	ColorIdentity     []CardWithEnum_ColorIdentity `protobuf:"varint,6,rep,packed,name=colorIdentity,proto3,enum=protobuf.CardWithEnum_ColorIdentity" json:"colorIdentity,omitempty"`
	Colors            []CardWithEnum_Colors        `protobuf:"varint,7,rep,packed,name=colors,proto3,enum=protobuf.CardWithEnum_Colors" json:"colors,omitempty"`
	ConvertedManaCost uint32                       `protobuf:"varint,8,opt,name=convertedManaCost,proto3" json:"convertedManaCost,omitempty"`
	EdhrecRank        uint32                       `protobuf:"varint,9,opt,name=edhrecRank,proto3" json:"edhrecRank,omitempty"`
	EdhrecSaltiness   float64                      `protobuf:"fixed64,10,opt,name=edhrecSaltiness,proto3" json:"edhrecSaltiness,omitempty"`
	Finishes          []CardWithEnum_Finishes      `protobuf:"varint,11,rep,packed,name=finishes,proto3,enum=protobuf.CardWithEnum_Finishes" json:"finishes,omitempty"`
	ForeignData       []*Foreigndata               `protobuf:"bytes,12,rep,name=foreignData,proto3" json:"foreignData,omitempty"`
	FrameVersion      string                       `protobuf:"bytes,13,opt,name=frameVersion,proto3" json:"frameVersion,omitempty"`
	HasFoil           bool                         `protobuf:"varint,14,opt,name=hasFoil,proto3" json:"hasFoil,omitempty"`
	HasNonFoil        bool                         `protobuf:"varint,15,opt,name=hasNonFoil,proto3" json:"hasNonFoil,omitempty"`
	Identifiers       *Identifiers                 `protobuf:"bytes,16,opt,name=identifiers,proto3" json:"identifiers,omitempty"`
	IsReprint         bool                         `protobuf:"varint,17,opt,name=isReprint,proto3" json:"isReprint,omitempty"`
	Keywords          []CardWithEnum_Keyword       `protobuf:"varint,18,rep,packed,name=keywords,proto3,enum=protobuf.CardWithEnum_Keyword" json:"keywords,omitempty"`
	Language          string                       `protobuf:"bytes,19,opt,name=language,proto3" json:"language,omitempty"`
	Layout            CardWithEnum_Layout          `protobuf:"varint,20,opt,name=layout,proto3,enum=protobuf.CardWithEnum_Layout" json:"layout,omitempty"`
	Legalities        *CardWithEnum_Legalities     `protobuf:"bytes,21,opt,name=legalities,proto3" json:"legalities,omitempty"`
	ManaCost          string                       `protobuf:"bytes,22,opt,name=manaCost,proto3" json:"manaCost,omitempty"`
	ManaValue         uint32                       `protobuf:"varint,23,opt,name=manaValue,proto3" json:"manaValue,omitempty"`
	Name              string                       `protobuf:"bytes,24,opt,name=name,proto3" json:"name,omitempty"`
	Number            string                       `protobuf:"bytes,25,opt,name=number,proto3" json:"number,omitempty"`
	OriginalText      string                       `protobuf:"bytes,26,opt,name=originalText,proto3" json:"originalText,omitempty"`
	OriginalType      string                       `protobuf:"bytes,27,opt,name=originalType,proto3" json:"originalType,omitempty"`
	Power             string                       `protobuf:"bytes,28,opt,name=power,proto3" json:"power,omitempty"`
	Printings         []string                     `protobuf:"bytes,29,rep,name=printings,proto3" json:"printings,omitempty"`
	PurchaseUrls      *Purchaseurls                `protobuf:"bytes,30,opt,name=purchaseUrls,proto3" json:"purchaseUrls,omitempty"`
	Rarity            CardWithEnum_Rarity          `protobuf:"varint,31,opt,name=rarity,proto3,enum=protobuf.CardWithEnum_Rarity" json:"rarity,omitempty"`
	SetCode           string                       `protobuf:"bytes,32,opt,name=setCode,proto3" json:"setCode,omitempty"`
	SourceProducts    *Sourceproducts              `protobuf:"bytes,33,opt,name=sourceProducts,proto3" json:"sourceProducts,omitempty"`
	Subtypes          []CardWithEnum_SubType       `protobuf:"varint,34,rep,packed,name=subtypes,proto3,enum=protobuf.CardWithEnum_SubType" json:"subtypes,omitempty"`
	Supertypes        []*anypb.Any                 `protobuf:"bytes,35,rep,name=supertypes,proto3" json:"supertypes,omitempty"`
	Text              string                       `protobuf:"bytes,36,opt,name=text,proto3" json:"text,omitempty"`
	Toughness         string                       `protobuf:"bytes,37,opt,name=toughness,proto3" json:"toughness,omitempty"`
	Type              string                       `protobuf:"bytes,38,opt,name=type,proto3" json:"type,omitempty"`
	Types             []CardWithEnum_Type          `protobuf:"varint,39,rep,packed,name=types,proto3,enum=protobuf.CardWithEnum_Type" json:"types,omitempty"`
	Uuid              string                       `protobuf:"bytes,40,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Variations        []string                     `protobuf:"bytes,41,rep,name=variations,proto3" json:"variations,omitempty"`
}

func (x *CardWithEnum) Reset() {
	*x = CardWithEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_with_enum_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardWithEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardWithEnum) ProtoMessage() {}

func (x *CardWithEnum) ProtoReflect() protoreflect.Message {
	mi := &file_card_with_enum_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardWithEnum.ProtoReflect.Descriptor instead.
func (*CardWithEnum) Descriptor() ([]byte, []int) {
	return file_card_with_enum_proto_rawDescGZIP(), []int{0}
}

func (x *CardWithEnum) GetArtist() string {
	if x != nil {
		return x.Artist
	}
	return ""
}

func (x *CardWithEnum) GetArtistIds() []string {
	if x != nil {
		return x.ArtistIds
	}
	return nil
}

func (x *CardWithEnum) GetAvailability() []CardWithEnum_Availability {
	if x != nil {
		return x.Availability
	}
	return nil
}

func (x *CardWithEnum) GetBoosterTypes() []CardWithEnum_BoosterType {
	if x != nil {
		return x.BoosterTypes
	}
	return nil
}

func (x *CardWithEnum) GetBorderColor() CardWithEnum_BorderColor {
	if x != nil {
		return x.BorderColor
	}
	return CardWithEnum_BorderColor_Unknown
}

func (x *CardWithEnum) GetColorIdentity() []CardWithEnum_ColorIdentity {
	if x != nil {
		return x.ColorIdentity
	}
	return nil
}

func (x *CardWithEnum) GetColors() []CardWithEnum_Colors {
	if x != nil {
		return x.Colors
	}
	return nil
}

func (x *CardWithEnum) GetConvertedManaCost() uint32 {
	if x != nil {
		return x.ConvertedManaCost
	}
	return 0
}

func (x *CardWithEnum) GetEdhrecRank() uint32 {
	if x != nil {
		return x.EdhrecRank
	}
	return 0
}

func (x *CardWithEnum) GetEdhrecSaltiness() float64 {
	if x != nil {
		return x.EdhrecSaltiness
	}
	return 0
}

func (x *CardWithEnum) GetFinishes() []CardWithEnum_Finishes {
	if x != nil {
		return x.Finishes
	}
	return nil
}

func (x *CardWithEnum) GetForeignData() []*Foreigndata {
	if x != nil {
		return x.ForeignData
	}
	return nil
}

func (x *CardWithEnum) GetFrameVersion() string {
	if x != nil {
		return x.FrameVersion
	}
	return ""
}

func (x *CardWithEnum) GetHasFoil() bool {
	if x != nil {
		return x.HasFoil
	}
	return false
}

func (x *CardWithEnum) GetHasNonFoil() bool {
	if x != nil {
		return x.HasNonFoil
	}
	return false
}

func (x *CardWithEnum) GetIdentifiers() *Identifiers {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *CardWithEnum) GetIsReprint() bool {
	if x != nil {
		return x.IsReprint
	}
	return false
}

func (x *CardWithEnum) GetKeywords() []CardWithEnum_Keyword {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *CardWithEnum) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *CardWithEnum) GetLayout() CardWithEnum_Layout {
	if x != nil {
		return x.Layout
	}
	return CardWithEnum_Layout_Unknown
}

func (x *CardWithEnum) GetLegalities() *CardWithEnum_Legalities {
	if x != nil {
		return x.Legalities
	}
	return nil
}

func (x *CardWithEnum) GetManaCost() string {
	if x != nil {
		return x.ManaCost
	}
	return ""
}

func (x *CardWithEnum) GetManaValue() uint32 {
	if x != nil {
		return x.ManaValue
	}
	return 0
}

func (x *CardWithEnum) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CardWithEnum) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *CardWithEnum) GetOriginalText() string {
	if x != nil {
		return x.OriginalText
	}
	return ""
}

func (x *CardWithEnum) GetOriginalType() string {
	if x != nil {
		return x.OriginalType
	}
	return ""
}

func (x *CardWithEnum) GetPower() string {
	if x != nil {
		return x.Power
	}
	return ""
}

func (x *CardWithEnum) GetPrintings() []string {
	if x != nil {
		return x.Printings
	}
	return nil
}

func (x *CardWithEnum) GetPurchaseUrls() *Purchaseurls {
	if x != nil {
		return x.PurchaseUrls
	}
	return nil
}

func (x *CardWithEnum) GetRarity() CardWithEnum_Rarity {
	if x != nil {
		return x.Rarity
	}
	return CardWithEnum_Rarity_Unknown
}

func (x *CardWithEnum) GetSetCode() string {
	if x != nil {
		return x.SetCode
	}
	return ""
}

func (x *CardWithEnum) GetSourceProducts() *Sourceproducts {
	if x != nil {
		return x.SourceProducts
	}
	return nil
}

func (x *CardWithEnum) GetSubtypes() []CardWithEnum_SubType {
	if x != nil {
		return x.Subtypes
	}
	return nil
}

func (x *CardWithEnum) GetSupertypes() []*anypb.Any {
	if x != nil {
		return x.Supertypes
	}
	return nil
}

func (x *CardWithEnum) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CardWithEnum) GetToughness() string {
	if x != nil {
		return x.Toughness
	}
	return ""
}

func (x *CardWithEnum) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CardWithEnum) GetTypes() []CardWithEnum_Type {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *CardWithEnum) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CardWithEnum) GetVariations() []string {
	if x != nil {
		return x.Variations
	}
	return nil
}

type CardWithEnum_Legalities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commander       CardWithEnum_Legalities_Legality `protobuf:"varint,1,opt,name=commander,proto3,enum=protobuf.CardWithEnum_Legalities_Legality" json:"commander,omitempty"`
	Duel            CardWithEnum_Legalities_Legality `protobuf:"varint,2,opt,name=duel,proto3,enum=protobuf.CardWithEnum_Legalities_Legality" json:"duel,omitempty"`
	Legacy          CardWithEnum_Legalities_Legality `protobuf:"varint,3,opt,name=legacy,proto3,enum=protobuf.CardWithEnum_Legalities_Legality" json:"legacy,omitempty"`
	Modern          CardWithEnum_Legalities_Legality `protobuf:"varint,4,opt,name=modern,proto3,enum=protobuf.CardWithEnum_Legalities_Legality" json:"modern,omitempty"`
	Oathbreaker     CardWithEnum_Legalities_Legality `protobuf:"varint,5,opt,name=oathbreaker,proto3,enum=protobuf.CardWithEnum_Legalities_Legality" json:"oathbreaker,omitempty"`
	Paupercommander CardWithEnum_Legalities_Legality `protobuf:"varint,6,opt,name=paupercommander,proto3,enum=protobuf.CardWithEnum_Legalities_Legality" json:"paupercommander,omitempty"`
	Penny           CardWithEnum_Legalities_Legality `protobuf:"varint,7,opt,name=penny,proto3,enum=protobuf.CardWithEnum_Legalities_Legality" json:"penny,omitempty"`
	Predh           CardWithEnum_Legalities_Legality `protobuf:"varint,8,opt,name=predh,proto3,enum=protobuf.CardWithEnum_Legalities_Legality" json:"predh,omitempty"`
	Premodern       CardWithEnum_Legalities_Legality `protobuf:"varint,9,opt,name=premodern,proto3,enum=protobuf.CardWithEnum_Legalities_Legality" json:"premodern,omitempty"`
	Vintage         CardWithEnum_Legalities_Legality `protobuf:"varint,10,opt,name=vintage,proto3,enum=protobuf.CardWithEnum_Legalities_Legality" json:"vintage,omitempty"`
}

func (x *CardWithEnum_Legalities) Reset() {
	*x = CardWithEnum_Legalities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_with_enum_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardWithEnum_Legalities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardWithEnum_Legalities) ProtoMessage() {}

func (x *CardWithEnum_Legalities) ProtoReflect() protoreflect.Message {
	mi := &file_card_with_enum_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardWithEnum_Legalities.ProtoReflect.Descriptor instead.
func (*CardWithEnum_Legalities) Descriptor() ([]byte, []int) {
	return file_card_with_enum_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CardWithEnum_Legalities) GetCommander() CardWithEnum_Legalities_Legality {
	if x != nil {
		return x.Commander
	}
	return CardWithEnum_Legalities_Legality_Unknown
}

func (x *CardWithEnum_Legalities) GetDuel() CardWithEnum_Legalities_Legality {
	if x != nil {
		return x.Duel
	}
	return CardWithEnum_Legalities_Legality_Unknown
}

func (x *CardWithEnum_Legalities) GetLegacy() CardWithEnum_Legalities_Legality {
	if x != nil {
		return x.Legacy
	}
	return CardWithEnum_Legalities_Legality_Unknown
}

func (x *CardWithEnum_Legalities) GetModern() CardWithEnum_Legalities_Legality {
	if x != nil {
		return x.Modern
	}
	return CardWithEnum_Legalities_Legality_Unknown
}

func (x *CardWithEnum_Legalities) GetOathbreaker() CardWithEnum_Legalities_Legality {
	if x != nil {
		return x.Oathbreaker
	}
	return CardWithEnum_Legalities_Legality_Unknown
}

func (x *CardWithEnum_Legalities) GetPaupercommander() CardWithEnum_Legalities_Legality {
	if x != nil {
		return x.Paupercommander
	}
	return CardWithEnum_Legalities_Legality_Unknown
}

func (x *CardWithEnum_Legalities) GetPenny() CardWithEnum_Legalities_Legality {
	if x != nil {
		return x.Penny
	}
	return CardWithEnum_Legalities_Legality_Unknown
}

func (x *CardWithEnum_Legalities) GetPredh() CardWithEnum_Legalities_Legality {
	if x != nil {
		return x.Predh
	}
	return CardWithEnum_Legalities_Legality_Unknown
}

func (x *CardWithEnum_Legalities) GetPremodern() CardWithEnum_Legalities_Legality {
	if x != nil {
		return x.Premodern
	}
	return CardWithEnum_Legalities_Legality_Unknown
}

func (x *CardWithEnum_Legalities) GetVintage() CardWithEnum_Legalities_Legality {
	if x != nil {
		return x.Vintage
	}
	return CardWithEnum_Legalities_Legality_Unknown
}

var File_card_with_enum_proto protoreflect.FileDescriptor

var file_card_with_enum_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x19, 0x0a, 0x0c, 0x43, 0x61,
	0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x47, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0c, 0x62, 0x6f, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x57,
	0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x0b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x42,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0b, 0x62, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64,
	0x4d, 0x61, 0x6e, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x64, 0x68, 0x72,
	0x65, 0x63, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x64,
	0x68, 0x72, 0x65, 0x63, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x64, 0x68, 0x72,
	0x65, 0x63, 0x53, 0x61, 0x6c, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x65, 0x64, 0x68, 0x72, 0x65, 0x63, 0x53, 0x61, 0x6c, 0x74, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x73, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73, 0x12,
	0x37, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x66, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x61, 0x73, 0x46, 0x6f, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68,
	0x61, 0x73, 0x46, 0x6f, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x4e, 0x6f, 0x6e,
	0x46, 0x6f, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x4e,
	0x6f, 0x6e, 0x46, 0x6f, 0x69, 0x6c, 0x12, 0x37, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x73, 0x52, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x57,
	0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x41, 0x0a, 0x0a,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x54, 0x65, 0x78, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c,
	0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x75, 0x72, 0x6c, 0x73, 0x52,
	0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x35, 0x0a,
	0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74,
	0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x06, 0x72, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40,
	0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x12, 0x3a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x22, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0a,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x75, 0x67, 0x68, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x67, 0x68,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x29, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0xa5, 0x06, 0x0a, 0x0a, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x48,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x75, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x04, 0x64, 0x75, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x06, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x06, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x42, 0x0a, 0x06,
	0x6d, 0x6f, 0x64, 0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68,
	0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x6e,
	0x12, 0x4c, 0x0a, 0x0b, 0x6f, 0x61, 0x74, 0x68, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4c, 0x65,
	0x67, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0b, 0x6f, 0x61, 0x74, 0x68, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x54,
	0x0a, 0x0f, 0x70, 0x61, 0x75, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0f, 0x70, 0x61, 0x75, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x65, 0x6e, 0x6e, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x05, 0x70, 0x65, 0x6e, 0x6e, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x72, 0x65, 0x64, 0x68, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4c, 0x65,
	0x67, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x05, 0x70, 0x72, 0x65, 0x64, 0x68, 0x12, 0x48, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x6d,
	0x6f, 0x64, 0x65, 0x72, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45,
	0x6e, 0x75, 0x6d, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x09, 0x70, 0x72, 0x65, 0x6d, 0x6f, 0x64, 0x65,
	0x72, 0x6e, 0x12, 0x44, 0x0a, 0x07, 0x76, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x07, 0x76, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x08, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x65,
	0x67, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x10, 0x02, 0x22, 0x57, 0x0a, 0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x4d, 0x54, 0x47, 0x4f, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x70, 0x65, 0x72, 0x10, 0x02,
	0x22, 0x3f, 0x0a, 0x0b, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x6f, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0x01, 0x22, 0x3d, 0x0a, 0x0b, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x13, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x10, 0x01,
	0x22, 0x43, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x10, 0x01, 0x22, 0x2e, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x5f, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x10, 0x01, 0x22, 0x36, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73, 0x5f, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x73, 0x5f, 0x4e, 0x6f, 0x6e, 0x46, 0x6f, 0x69, 0x6c, 0x10, 0x01, 0x22, 0x37, 0x0a,
	0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x10, 0x01, 0x22, 0x2f, 0x0a, 0x06, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x01, 0x22, 0x31, 0x0a, 0x06, 0x52, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x01, 0x22, 0x45, 0x0a, 0x07, 0x53, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6c, 0x65, 0x72, 0x69, 0x63, 0x10,
	0x02, 0x22, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x01, 0x42, 0x0c,
	0x5a, 0x0a, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_card_with_enum_proto_rawDescOnce sync.Once
	file_card_with_enum_proto_rawDescData = file_card_with_enum_proto_rawDesc
)

func file_card_with_enum_proto_rawDescGZIP() []byte {
	file_card_with_enum_proto_rawDescOnce.Do(func() {
		file_card_with_enum_proto_rawDescData = protoimpl.X.CompressGZIP(file_card_with_enum_proto_rawDescData)
	})
	return file_card_with_enum_proto_rawDescData
}

var file_card_with_enum_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_card_with_enum_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_card_with_enum_proto_goTypes = []interface{}{
	(CardWithEnum_Availability)(0),        // 0: protobuf.CardWithEnum.Availability
	(CardWithEnum_BoosterType)(0),         // 1: protobuf.CardWithEnum.BoosterType
	(CardWithEnum_BorderColor)(0),         // 2: protobuf.CardWithEnum.BorderColor
	(CardWithEnum_ColorIdentity)(0),       // 3: protobuf.CardWithEnum.ColorIdentity
	(CardWithEnum_Colors)(0),              // 4: protobuf.CardWithEnum.Colors
	(CardWithEnum_Finishes)(0),            // 5: protobuf.CardWithEnum.Finishes
	(CardWithEnum_Keyword)(0),             // 6: protobuf.CardWithEnum.Keyword
	(CardWithEnum_Layout)(0),              // 7: protobuf.CardWithEnum.Layout
	(CardWithEnum_Rarity)(0),              // 8: protobuf.CardWithEnum.Rarity
	(CardWithEnum_SubType)(0),             // 9: protobuf.CardWithEnum.SubType
	(CardWithEnum_Type)(0),                // 10: protobuf.CardWithEnum.Type
	(CardWithEnum_Legalities_Legality)(0), // 11: protobuf.CardWithEnum.Legalities.Legality
	(*CardWithEnum)(nil),                  // 12: protobuf.CardWithEnum
	(*CardWithEnum_Legalities)(nil),       // 13: protobuf.CardWithEnum.Legalities
	(*Foreigndata)(nil),                   // 14: protobuf.Foreigndata
	(*Identifiers)(nil),                   // 15: protobuf.Identifiers
	(*Purchaseurls)(nil),                  // 16: protobuf.Purchaseurls
	(*Sourceproducts)(nil),                // 17: protobuf.Sourceproducts
	(*anypb.Any)(nil),                     // 18: google.protobuf.Any
}
var file_card_with_enum_proto_depIdxs = []int32{
	0,  // 0: protobuf.CardWithEnum.availability:type_name -> protobuf.CardWithEnum.Availability
	1,  // 1: protobuf.CardWithEnum.boosterTypes:type_name -> protobuf.CardWithEnum.BoosterType
	2,  // 2: protobuf.CardWithEnum.borderColor:type_name -> protobuf.CardWithEnum.BorderColor
	3,  // 3: protobuf.CardWithEnum.colorIdentity:type_name -> protobuf.CardWithEnum.ColorIdentity
	4,  // 4: protobuf.CardWithEnum.colors:type_name -> protobuf.CardWithEnum.Colors
	5,  // 5: protobuf.CardWithEnum.finishes:type_name -> protobuf.CardWithEnum.Finishes
	14, // 6: protobuf.CardWithEnum.foreignData:type_name -> protobuf.Foreigndata
	15, // 7: protobuf.CardWithEnum.identifiers:type_name -> protobuf.Identifiers
	6,  // 8: protobuf.CardWithEnum.keywords:type_name -> protobuf.CardWithEnum.Keyword
	7,  // 9: protobuf.CardWithEnum.layout:type_name -> protobuf.CardWithEnum.Layout
	13, // 10: protobuf.CardWithEnum.legalities:type_name -> protobuf.CardWithEnum.Legalities
	16, // 11: protobuf.CardWithEnum.purchaseUrls:type_name -> protobuf.Purchaseurls
	8,  // 12: protobuf.CardWithEnum.rarity:type_name -> protobuf.CardWithEnum.Rarity
	17, // 13: protobuf.CardWithEnum.sourceProducts:type_name -> protobuf.Sourceproducts
	9,  // 14: protobuf.CardWithEnum.subtypes:type_name -> protobuf.CardWithEnum.SubType
	18, // 15: protobuf.CardWithEnum.supertypes:type_name -> google.protobuf.Any
	10, // 16: protobuf.CardWithEnum.types:type_name -> protobuf.CardWithEnum.Type
	11, // 17: protobuf.CardWithEnum.Legalities.commander:type_name -> protobuf.CardWithEnum.Legalities.Legality
	11, // 18: protobuf.CardWithEnum.Legalities.duel:type_name -> protobuf.CardWithEnum.Legalities.Legality
	11, // 19: protobuf.CardWithEnum.Legalities.legacy:type_name -> protobuf.CardWithEnum.Legalities.Legality
	11, // 20: protobuf.CardWithEnum.Legalities.modern:type_name -> protobuf.CardWithEnum.Legalities.Legality
	11, // 21: protobuf.CardWithEnum.Legalities.oathbreaker:type_name -> protobuf.CardWithEnum.Legalities.Legality
	11, // 22: protobuf.CardWithEnum.Legalities.paupercommander:type_name -> protobuf.CardWithEnum.Legalities.Legality
	11, // 23: protobuf.CardWithEnum.Legalities.penny:type_name -> protobuf.CardWithEnum.Legalities.Legality
	11, // 24: protobuf.CardWithEnum.Legalities.predh:type_name -> protobuf.CardWithEnum.Legalities.Legality
	11, // 25: protobuf.CardWithEnum.Legalities.premodern:type_name -> protobuf.CardWithEnum.Legalities.Legality
	11, // 26: protobuf.CardWithEnum.Legalities.vintage:type_name -> protobuf.CardWithEnum.Legalities.Legality
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_card_with_enum_proto_init() }
func file_card_with_enum_proto_init() {
	if File_card_with_enum_proto != nil {
		return
	}
	file_shared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_card_with_enum_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardWithEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_with_enum_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardWithEnum_Legalities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_card_with_enum_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_card_with_enum_proto_goTypes,
		DependencyIndexes: file_card_with_enum_proto_depIdxs,
		EnumInfos:         file_card_with_enum_proto_enumTypes,
		MessageInfos:      file_card_with_enum_proto_msgTypes,
	}.Build()
	File_card_with_enum_proto = out.File
	file_card_with_enum_proto_rawDesc = nil
	file_card_with_enum_proto_goTypes = nil
	file_card_with_enum_proto_depIdxs = nil
}
